export default function _iterableToArrayLimit(arr, i) {
<<<<<<< HEAD
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

  if (_i == null) return;
=======
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
>>>>>>> ff05c00adb6749a8c38f91ea720c239e6ebc17b9
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
<<<<<<< HEAD
    for (_i = _i.call(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
=======
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
>>>>>>> ff05c00adb6749a8c38f91ea720c239e6ebc17b9
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}